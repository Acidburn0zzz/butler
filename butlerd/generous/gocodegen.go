package main

import (
	"fmt"
	"strings"
)

func (bc *GenerousContext) GenerateGoCode() error {
	bc.Task("Generating go code")

	doc := bc.NewGenerousRelativeDoc("../messages/messages.go")

	doc.Line("// Code generated by generous; DO NOT EDIT.")
	doc.Line("")
	doc.Line("package messages")
	doc.Line("")
	doc.Line("import (")
	doc.Line("	%#v", "encoding/json")
	doc.Line("	%#v", "errors")
	doc.Line("")
	doc.Line("	%#v", "github.com/itchio/butler/butlerd")
	doc.Line("	%#v", "github.com/sourcegraph/jsonrpc2")
	doc.Line(")")
	doc.Line("")

	scope := newScope(bc)
	must(scope.Assimilate("github.com/itchio/butler/butlerd", "types.go"))

	var clientRequests []string

	for _, category := range scope.categoryList {
		cat := scope.categories[category]
		doc.Line("")
		doc.Line("//==============================")
		doc.Line("// %s", category)
		doc.Line("//==============================")
		doc.Line("")

		for _, entry := range cat.entries {
			switch entry.kind {
			case EntryKindParams:
				ts := asType(entry.gd)
				varName := strings.TrimSuffix(ts.Name.Name, "Params")
				typeName := varName + "Type"
				paramsTypeName := fmt.Sprintf("butlerd.%s", ts.Name.Name)
				resultTypeName := fmt.Sprintf("butlerd.%sResult", strings.TrimSuffix(ts.Name.Name, "Params"))
				method := entry.name
				if entry.caller == CallerClient {
					clientRequests = append(clientRequests, method)
				}

				doc.Line("// %s (Request)", method)
				doc.Line("")
				doc.Line("type %s struct {}", typeName)
				doc.Line("")
				doc.Line("var _ RequestMessage = (*%s)(nil)", typeName)
				doc.Line("")
				doc.Line("func (r *%s) Method() string {", typeName)
				doc.Line("  return %#v", method)
				doc.Line("}")

				switch entry.caller {
				case CallerClient:
					doc.Line("")
					doc.Line("func (r *%s) Register(router *butlerd.Router, f func(*butlerd.RequestContext, *%s) (*%s, error)) {", typeName, paramsTypeName, resultTypeName)
					doc.Line("  router.Register(%#v, func (rc *butlerd.RequestContext) (interface{}, error) {", method)
					doc.Line("    var params %s", paramsTypeName)
					doc.Line("    err := json.Unmarshal(*rc.Params, &params)")
					doc.Line("    if err != nil {")
					doc.Line("    	return nil, &butlerd.RpcError{Code: jsonrpc2.CodeParseError, Message: err.Error()}")
					doc.Line("    }")
					doc.Line("    res, err := f(rc, &params)")
					doc.Line("    if err != nil {")
					doc.Line("    	return nil, err")
					doc.Line("    }")
					doc.Line("    if res == nil {")
					doc.Line("    	return nil, errors.New(%#v)", fmt.Sprintf("internal error: nil result for %s", method))
					doc.Line("    }")
					doc.Line("    return res, nil")
					doc.Line("  })")
					doc.Line("}")
				case CallerServer:
					doc.Line("")
					doc.Line("func (r *%s) Call(rc *butlerd.RequestContext, params *%s) (*%s, error) {", typeName, paramsTypeName, resultTypeName)
					doc.Line("  var result %s", resultTypeName)
					doc.Line("  err := rc.Call(%#v, params, &result)", method)
					doc.Line("  return &result, err")
					doc.Line("}")
				}
				doc.Line("")
				doc.Line("var %s *%s", varName, typeName)
				doc.Line("")

			case EntryKindNotification:
				ts := asType(entry.gd)
				varName := strings.TrimSuffix(ts.Name.Name, "Notification")
				typeName := varName + "Type"
				paramsTypeName := fmt.Sprintf("butlerd.%s", ts.Name.Name)
				method := entry.name

				doc.Line("// %s (Notification)", method)
				doc.Line("")
				doc.Line("type %s struct {}", typeName)
				doc.Line("")
				doc.Line("var _ NotificationMessage = (*%s)(nil)", typeName)
				doc.Line("")
				doc.Line("func (r *%s) Method() string {", typeName)
				doc.Line("  return %#v", method)
				doc.Line("}")
				doc.Line("")
				doc.Line("func (r *%s) Notify(rc *butlerd.RequestContext, params *%s) (error) {", typeName, paramsTypeName)
				doc.Line("  return rc.Notify(%#v, params)", method)
				doc.Line("}")
				doc.Line("")
				doc.Line("var %s *%s", varName, typeName)
				doc.Line("")
			}
		}
	}

	doc.Line("")
	doc.Line("func EnsureAllRequests(router *butlerd.Router) {")
	for _, method := range clientRequests {
		doc.Line("  if _, ok := router.Handlers[%#v]; !ok { panic(%#v) }", method, fmt.Sprintf("missing request handler for (%s)", method))
	}
	doc.Line("}")
	doc.Line("")

	doc.Commit("")
	doc.Write()

	return nil
}
